use std::mem;

fn main() {
    let char_len = mem::size_of::<char>(); // rust的char类型占4个字节
    // Q: 为什么rust char类型占4个字节?
    // A: 在rust中,char类型占4个字节。这是因为rust的char类型是Unicode标量值
    //    的表示, 它需要能够表示Unicode中的所有有效字符，这些字符的编码可能
    //    需要多达4个字节。
    // 
    // Q: 什么是Unicode的标量值？
    // A: Unicode标量值是Unicode标准中用于表示字符的数值。这些值是Unicode代码
    //    点的一个子集,用于定义字符在Unicode标准中的唯一位置。
    //    Unicode标量值的特点:
    //      1. 唯一性: 每个Unicode标量值对应一个特定的字符或符号,确保了字符的全球一致性和唯一性
    //      2. 广泛的覆盖范围: Unicode能表示超过140000个字符,包括世界上大多数活跃的书写系统的字
    //         符, 以及已经不再使用的古老文字系统
    //      3. 扩展性: Unicode标准定期更新, 添加新的字符和符号
    //      4. 编码方案的兼容性: Unicode标量值可以通过多种方式编码,例如UTF-8、UTF-16、UTF-32。
    //         这些编码方案使得Unicode能够在不同的系统和设备上使用
    //  Q: 什么是Unicode? 什么是UTF-8？Unicode和ascii码的区别?
    //  A: (1) Unicode 是一个国际标准，旨在为世界上所有的书写系统中的每一个字符提供一个唯一的编号。
    //         它的目的是替代之前存在的多种字符编码方案，解决不同编码系统之间的兼容问题，使得文本
    //         和符号在不同的计算机和软件系统之间可以无缝交换和处理
    //     (2) UTF-8（8-bit Unicode Transformation Format）是一种针对 Unicode 的可变长度字符编码系统。
    //         它可以使用一个到四个字节来表示一个 Unicode 字符，编码长度根据字符的不同而变化。UTF-8 
    //         的设计使得它与传统的 ASCII 编码兼容，即 ASCII 编码的字符在 UTF-8 中保持不变，这使得 
    //         UTF-8 在现有系统中非常容易被采用。UTF-8 是互联网上使用最广泛的 Unicode 编码，特别适合
    //         用于网络传输和存储
    //  Q: UTF-8、UTF-16 和 UTF-32有什么区别?
    //  A: (1) UTF-8 使用 1 到 4 个字节来编码字符。ASCII 字符只需一个字节，而常用的其他字符可能需要
    //         两个或三个字节，非常罕见的字符会使用四个字节
    //     (2) UTF-16 使用 2 个或 4 个字节来编码字符
    //     (3) UTF-32 总是使用四个字节来编码所有字符
    println!("char bytes is {}", char_len);
}
