Rust编程相关内容

Rust基础内容
=============================================================================
-------------------------------------                    Rust edition
一、介绍
在Rust中，“edition”指的是Rust语言的一个版本，它定义了编译器支持的语言特性和语法。
Rust 的edition机制允许开发者选择特定版本的Rust语言特性，这样可以在不破坏现有代码
的前提下引入新的语言特性和改进。

1. Rust Edition 的目的:
    Rust 的设计者引入 edition 的主要目的是为了实现两个关键目标：
        (1) 向后兼容性：保证现有的Rust代码可以继续在新版本的Rust编译器上编译
            和运行，即使语言的某些部分已经发生了变化。
        (2) 持续创新：允许 Rust 语言引入重大的新特性和改进，而不会打破现有
            代码的兼容性。

2. Edition 的工作方式
    每个 Rust 项目可以在其 `Cargo.toml` 文件中指定使用的 edition，例如：

        ```toml
        [package]
        name = "my_package"
        version = "0.1.0"
        edition = "2018"
        ```

    这意味着该项目将使用 Rust 2018 edition 的语言特性和规则进行编译。如果不指定 edition，
    默认使用 Rust 2015。

3. 主要的 Rust Editions
    截至目前（2021年的知识截止点），Rust 主要有以下几个 editions：
        - Rust 2015：这是 Rust 1.0 发布时的原始 edition。
        - Rust 2018：这是第二个 edition，引入了一些重大改进，如非词法生命周期（NLL）、改进的模块系统等。
        - Rust 2021：这是第三个 edition，继续引入新特性和改进，如更严格的借用检查器、新的闭包捕获规则等。

4. 总结
    Editions 允许 Rust 开发者在不影响现有代码的情况下，逐步采用新的语言特性。
    这种机制确保了 Rust 语言的稳定性和创新性能够并行不悖。每个新的edition都是对Rust语言的一次重大更新，
    旨在改进语言的易用性和性能，同时保持对旧代码的兼容。

rust工具
 =============================================================================
 -------------------------------------                    rustup
 Note: rustup (toolchain manager)
       rustup是Rust的安装和管理工具,安装和管理许多Rust       
       工具链rustup将rustc, cargo, rustup和其他标准工具      
       安装到Cargo的bin目录中。在Unix系统中, 它位于:         
         $HOME/.cargo/bin,                                   
       这个目录也是cargo install安装Rust程序和Cargo插件的目录
